
.decl getFunction(id:unsigned, idFunc:unsigned, name:symbol)

// get the function that an instruction belong to
getFunction(id, idFunc, name) :-
	Instruction(id, _, _, _, _, _, _, _, _),
	Function(idFunc, name, _, _, _, _),
	reachAst(idFunc, id).

.decl FunctionInScope(name:symbol)

.decl inScope(id:unsigned)
inScope(id) :-
	getFunction(id, _, name),
	FunctionInScope(name).

.decl FuncName(id:unsigned, name:symbol)

FuncName(id, name) :- Function(id, name, _, _, _, _).

.decl FuncSig(id:unsigned, nargs:unsigned, nlocals:unsigned, nresults:unsigned)

FuncSig(id, nargs, nlocals, nresults) :-
	Function(id, _, _, nargs, nlocals, nresults).

.decl FreeFuncName(name:symbol)
FreeFuncName("$dlfree").
FreeFuncName("$operator delete[](void*)"). // fast check, need to fix later
FreeFuncName("$operator delete(void*)").

.decl PrintfFuncName(name:symbol)
PrintfFuncName("$printf").
PrintfFuncName("$vprintf").
PrintfFuncName("$fprintf").

.decl UnsafeFuncName(name:symbol)
UnsafeFuncName("$atoi").
UnsafeFuncName("$atol").
UnsafeFuncName("$atof").
UnsafeFuncName("$atoll").
UnsafeFuncName("$gets").
UnsafeFuncName("$strcat").
UnsafeFuncName("$strcpy").
UnsafeFuncName("$sprintf").

.decl CheckRetFuncName(name:symbol)
CheckRetFuncName("$fputs").
CheckRetFuncName("$fputc").
CheckRetFuncName("$fread").
CheckRetFuncName("$fscanf").
CheckRetFuncName("$fwrite").
CheckRetFuncName("$putc").
CheckRetFuncName("$putchar").
CheckRetFuncName("$puts").
CheckRetFuncName("$strcpy").
